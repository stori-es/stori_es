function ClusterIcon(e, t) {
    e.getMarkerClusterer().extend(ClusterIcon, google.maps.OverlayView);
    this.cluster_ = e;
    this.styles_ = t;
    this.center_ = null;
    this.div_ = null;
    this.sums_ = null;
    this.visible_ = false;
    this.setMap(e.getMap())
}
function Cluster(e) {
    this.markerClusterer_ = e;
    this.map_ = e.getMap();
    this.gridSize_ = e.getGridSize();
    this.minClusterSize_ = e.getMinimumClusterSize();
    this.averageCenter_ = e.getAverageCenter();
    this.printable_ = e.getPrintable();
    this.markers_ = [];
    this.center_ = null;
    this.bounds_ = null;
    this.clusterIcon_ = new ClusterIcon(this, e.getStyles())
}
function MarkerClusterer(e, t, n) {
    this.extend(MarkerClusterer, google.maps.OverlayView);
    t = t || [];
    n = n || {};
    this.markers_ = [];
    this.clusters_ = [];
    this.listeners_ = [];
    this.activeMap_ = null;
    this.ready_ = false;
    this.gridSize_ = n.gridSize || 60;
    this.minClusterSize_ = n.minimumClusterSize || 2;
    this.maxZoom_ = n.maxZoom || null;
    this.styles_ = n.styles || [];
    this.title_ = n.title || "";
    this.zoomOnClick_ = true;
    if (n.zoomOnClick !== undefined) {
        this.zoomOnClick_ = n.zoomOnClick
    }
    this.averageCenter_ = false;
    if (n.averageCenter !== undefined) {
        this.averageCenter_ = n.averageCenter
    }
    this.ignoreHidden_ = false;
    if (n.ignoreHidden !== undefined) {
        this.ignoreHidden_ = n.ignoreHidden
    }
    this.printable_ = false;
    if (n.printable !== undefined) {
        this.printable_ = n.printable
    }
    this.imagePath_ = n.imagePath || MarkerClusterer.IMAGE_PATH;
    this.imageExtension_ = n.imageExtension || MarkerClusterer.IMAGE_EXTENSION;
    this.imageSizes_ = n.imageSizes || MarkerClusterer.IMAGE_SIZES;
    this.calculator_ = n.calculator || MarkerClusterer.CALCULATOR;
    this.batchSize_ = n.batchSize || MarkerClusterer.BATCH_SIZE;
    this.batchSizeIE_ = n.batchSizeIE || MarkerClusterer.BATCH_SIZE_IE;
    if (navigator.userAgent.toLowerCase().indexOf("msie") !== -1) {
        this.batchSize_ = this.batchSizeIE_
    }
    this.setupStyles_();
    this.addMarkers(t, true);
    this.setMap(e)
}
ClusterIcon.prototype.onAdd = function () {
    var e = this;
    var t;
    var n;
    this.div_ = document.createElement("div");
    if (this.visible_) {
        this.show()
    }
    this.getPanes().overlayMouseTarget.appendChild(this.div_);
    google.maps.event.addListener(this.getMap(), "bounds_changed", function () {
        n = t
    });
    google.maps.event.addDomListener(this.div_, "mousedown", function () {
        t = true;
        n = false
    });
    google.maps.event.addDomListener(this.div_, "click", function (r) {
        t = false;
        if (!n) {
            var i;
            var s = e.cluster_.getMarkerClusterer();
            google.maps.event.trigger(s, "click", e.cluster_);
            google.maps.event.trigger(s, "clusterclick", e.cluster_);
            if (s.getZoomOnClick()) {
                i = s.getMaxZoom();
                s.getMap().fitBounds(e.cluster_.getBounds());
                if (i !== null && s.getMap().getZoom() > i) {
                    s.getMap().setZoom(i + 1)
                }
            }
            r.cancelBubble = true;
            if (r.stopPropagation) {
                r.stopPropagation()
            }
        }
    });
    google.maps.event.addDomListener(this.div_, "mouseover", function () {
        var t = e.cluster_.getMarkerClusterer();
        google.maps.event.trigger(t, "mouseover", e.cluster_)
    });
    google.maps.event.addDomListener(this.div_, "mouseout", function () {
        var t = e.cluster_.getMarkerClusterer();
        google.maps.event.trigger(t, "mouseout", e.cluster_)
    })
};
ClusterIcon.prototype.onRemove = function () {
    if (this.div_ && this.div_.parentNode) {
        this.hide();
        google.maps.event.clearInstanceListeners(this.div_);
        this.div_.parentNode.removeChild(this.div_);
        this.div_ = null
    }
};
ClusterIcon.prototype.draw = function () {
    if (this.visible_) {
        var e = this.getPosFromLatLng_(this.center_);
        this.div_.style.top = e.y + "px";
        this.div_.style.left = e.x + "px"
    }
};
ClusterIcon.prototype.hide = function () {
    if (this.div_) {
        this.div_.style.display = "none"
    }
    this.visible_ = false
};
ClusterIcon.prototype.show = function () {
    if (this.div_) {
        var e = this.getPosFromLatLng_(this.center_);
        this.div_.style.cssText = this.createCss(e);
        if (this.cluster_.printable_) {
            this.div_.innerHTML = "<img src='" + this.url_ + "'><div style='position: absolute; top: 0px; left: 0px; width: " + this.width_ + "px;'>" + this.sums_.text + "</div>"
        } else {
            this.div_.innerHTML = this.sums_.text
        }
        this.div_.title = this.cluster_.getMarkerClusterer().getTitle();
        this.div_.style.display = ""
    }
    this.visible_ = true
};
ClusterIcon.prototype.useStyle = function (e) {
    this.sums_ = e;
    var t = Math.max(0, e.index - 1);
    t = Math.min(this.styles_.length - 1, t);
    var n = this.styles_[t];
    this.url_ = n.url;
    this.height_ = n.height;
    this.width_ = n.width;
    this.anchor_ = n.anchor;
    this.anchorIcon_ = n.anchorIcon || [parseInt(this.height_ / 2, 10), parseInt(this.width_ / 2, 10)];
    this.textColor_ = n.textColor || "black";
    this.textSize_ = n.textSize || 11;
    this.textDecoration_ = n.textDecoration || "none";
    this.fontWeight_ = n.fontWeight || "bold";
    this.fontStyle_ = n.fontStyle || "normal";
    this.fontFamily_ = n.fontFamily || "Arial,sans-serif";
    this.backgroundPosition_ = n.backgroundPosition || "0 0"
};
ClusterIcon.prototype.setCenter = function (e) {
    this.center_ = e
};
ClusterIcon.prototype.createCss = function (e) {
    var t = [];
    if (!this.cluster_.printable_) {
        t.push("background-image:url(" + this.url_ + ");");
        t.push("background-position:" + this.backgroundPosition_ + ";")
    }
    if (typeof this.anchor_ === "object") {
        if (typeof this.anchor_[0] === "number" && this.anchor_[0] > 0 && this.anchor_[0] < this.height_) {
            t.push("height:" + (this.height_ - this.anchor_[0]) + "px; padding-top:" + this.anchor_[0] + "px;")
        } else {
            t.push("height:" + this.height_ + "px; line-height:" + this.height_ + "px;")
        }
        if (typeof this.anchor_[1] === "number" && this.anchor_[1] > 0 && this.anchor_[1] < this.width_) {
            t.push("width:" + (this.width_ - this.anchor_[1]) + "px; padding-left:" + this.anchor_[1] + "px;")
        } else {
            t.push("width:" + this.width_ + "px; text-align:center;")
        }
    } else {
        t.push("height:" + this.height_ + "px; line-height:" + this.height_ + "px; width:" + this.width_ + "px; text-align:center;")
    }
    t.push("cursor:pointer; top:" + e.y + "px; left:" + e.x + "px; color:" + this.textColor_ + "; position:absolute; font-size:" + this.textSize_ + "px; font-family:" + this.fontFamily_ + "; font-weight:" + this.fontWeight_ + "; font-style:" + this.fontStyle_ + "; text-decoration:" + this.textDecoration_ + ";");
    return t.join("")
};
ClusterIcon.prototype.getPosFromLatLng_ = function (e) {
    var t = this.getProjection().fromLatLngToDivPixel(e);
    t.x -= this.anchorIcon_[1];
    t.y -= this.anchorIcon_[0];
    return t
};
Cluster.prototype.getSize = function () {
    return this.markers_.length
};
Cluster.prototype.getMarkers = function () {
    return this.markers_
};
Cluster.prototype.getCenter = function () {
    return this.center_
};
Cluster.prototype.getMap = function () {
    return this.map_
};
Cluster.prototype.getMarkerClusterer = function () {
    return this.markerClusterer_
};
Cluster.prototype.getBounds = function () {
    var e;
    var t = new google.maps.LatLngBounds(this.center_, this.center_);
    var n = this.getMarkers();
    for (e = 0; e < n.length; e++) {
        t.extend(n[e].getPosition())
    }
    return t
};
Cluster.prototype.remove = function () {
    this.clusterIcon_.setMap(null);
    this.markers_ = [];
    delete this.markers_
};
Cluster.prototype.addMarker = function (e) {
    var t;
    var n;
    var r;
    if (this.isMarkerAlreadyAdded_(e)) {
        return false
    }
    if (!this.center_) {
        this.center_ = e.getPosition();
        this.calculateBounds_()
    } else {
        if (this.averageCenter_) {
            var i = this.markers_.length + 1;
            var s = (this.center_.lat() * (i - 1) + e.getPosition().lat()) / i;
            var o = (this.center_.lng() * (i - 1) + e.getPosition().lng()) / i;
            this.center_ = new google.maps.LatLng(s, o);
            this.calculateBounds_()
        }
    }
    e.isAdded = true;
    this.markers_.push(e);
    n = this.markers_.length;
    r = this.markerClusterer_.getMaxZoom();
    if (r !== null && this.map_.getZoom() > r) {
        if (e.getMap() !== this.map_) {
            e.setMap(this.map_)
        }
    } else if (n < this.minClusterSize_) {
        if (e.getMap() !== this.map_) {
            e.setMap(this.map_)
        }
    } else if (n === this.minClusterSize_) {
        for (t = 0; t < n; t++) {
            this.markers_[t].setMap(null)
        }
    } else {
        e.setMap(null)
    }
    this.updateIcon_();
    return true
};
Cluster.prototype.isMarkerInClusterBounds = function (e) {
    return this.bounds_.contains(e.getPosition())
};
Cluster.prototype.calculateBounds_ = function () {
    var e = new google.maps.LatLngBounds(this.center_, this.center_);
    this.bounds_ = this.markerClusterer_.getExtendedBounds(e)
};
Cluster.prototype.updateIcon_ = function () {
    var e = this.markers_.length;
    var t = this.markerClusterer_.getMaxZoom();
    if (t !== null && this.map_.getZoom() > t) {
        this.clusterIcon_.hide();
        return
    }
    if (e < this.minClusterSize_) {
        this.clusterIcon_.hide();
        return
    }
    var n = this.markerClusterer_.getStyles().length;
    var r = this.markerClusterer_.getCalculator()(this.markers_, n);
    this.clusterIcon_.setCenter(this.center_);
    this.clusterIcon_.useStyle(r);
    this.clusterIcon_.show()
};
Cluster.prototype.isMarkerAlreadyAdded_ = function (e) {
    var t;
    if (this.markers_.indexOf) {
        return this.markers_.indexOf(e) !== -1
    } else {
        for (t = 0; t < this.markers_.length; t++) {
            if (e === this.markers_[t]) {
                return true
            }
        }
    }
    return false
};
MarkerClusterer.prototype.onAdd = function () {
    var e = this;
    this.activeMap_ = this.getMap();
    this.ready_ = true;
    this.repaint();
    this.listeners_ = [google.maps.event.addListener(this.getMap(), "zoom_changed", function () {
        e.resetViewport_(false)
    }), google.maps.event.addListener(this.getMap(), "idle", function () {
        e.redraw_()
    })]
};
MarkerClusterer.prototype.onRemove = function () {
    var e;
    for (e = 0; e < this.markers_.length; e++) {
        this.markers_[e].setMap(this.activeMap_)
    }
    for (e = 0; e < this.clusters_.length; e++) {
        this.clusters_[e].remove()
    }
    this.clusters_ = [];
    for (e = 0; e < this.listeners_.length; e++) {
        google.maps.event.removeListener(this.listeners_[e])
    }
    this.listeners_ = [];
    this.activeMap_ = null;
    this.ready_ = false
};
MarkerClusterer.prototype.draw = function () {
};
MarkerClusterer.prototype.setupStyles_ = function () {
    var e, t;
    if (this.styles_.length > 0) {
        return
    }
    for (e = 0; e < this.imageSizes_.length; e++) {
        t = this.imageSizes_[e];
        this.styles_.push({url: this.imagePath_ + (e + 1) + "." + this.imageExtension_, height: t, width: t})
    }
};
MarkerClusterer.prototype.fitMapToMarkers = function () {
    var e;
    var t = this.getMarkers();
    var n = new google.maps.LatLngBounds;
    for (e = 0; e < t.length; e++) {
        n.extend(t[e].getPosition())
    }
    this.getMap().fitBounds(n)
};
MarkerClusterer.prototype.getGridSize = function () {
    return this.gridSize_
};
MarkerClusterer.prototype.setGridSize = function (e) {
    this.gridSize_ = e
};
MarkerClusterer.prototype.getMinimumClusterSize = function () {
    return this.minClusterSize_
};
MarkerClusterer.prototype.setMinimumClusterSize = function (e) {
    this.minClusterSize_ = e
};
MarkerClusterer.prototype.getMaxZoom = function () {
    return this.maxZoom_
};
MarkerClusterer.prototype.setMaxZoom = function (e) {
    this.maxZoom_ = e
};
MarkerClusterer.prototype.getStyles = function () {
    return this.styles_
};
MarkerClusterer.prototype.setStyles = function (e) {
    this.styles_ = e
};
MarkerClusterer.prototype.getTitle = function () {
    return this.title_
};
MarkerClusterer.prototype.setTitle = function (e) {
    this.title_ = e
};
MarkerClusterer.prototype.getZoomOnClick = function () {
    return this.zoomOnClick_
};
MarkerClusterer.prototype.setZoomOnClick = function (e) {
    this.zoomOnClick_ = e
};
MarkerClusterer.prototype.getAverageCenter = function () {
    return this.averageCenter_
};
MarkerClusterer.prototype.setAverageCenter = function (e) {
    this.averageCenter_ = e
};
MarkerClusterer.prototype.getIgnoreHidden = function () {
    return this.ignoreHidden_
};
MarkerClusterer.prototype.setIgnoreHidden = function (e) {
    this.ignoreHidden_ = e
};
MarkerClusterer.prototype.getImageExtension = function () {
    return this.imageExtension_
};
MarkerClusterer.prototype.setImageExtension = function (e) {
    this.imageExtension_ = e
};
MarkerClusterer.prototype.getImagePath = function () {
    return this.imagePath_
};
MarkerClusterer.prototype.setImagePath = function (e) {
    this.imagePath_ = e
};
MarkerClusterer.prototype.getImageSizes = function () {
    return this.imageSizes_
};
MarkerClusterer.prototype.setImageSizes = function (e) {
    this.imageSizes_ = e
};
MarkerClusterer.prototype.getCalculator = function () {
    return this.calculator_
};
MarkerClusterer.prototype.setCalculator = function (e) {
    this.calculator_ = e
};
MarkerClusterer.prototype.getPrintable = function () {
    return this.printable_
};
MarkerClusterer.prototype.setPrintable = function (e) {
    this.printable_ = e
};
MarkerClusterer.prototype.getBatchSizeIE = function () {
    return this.batchSizeIE_
};
MarkerClusterer.prototype.setBatchSizeIE = function (e) {
    this.batchSizeIE_ = e
};
MarkerClusterer.prototype.getMarkers = function () {
    return this.markers_
};
MarkerClusterer.prototype.getTotalMarkers = function () {
    return this.markers_.length
};
MarkerClusterer.prototype.getClusters = function () {
    return this.clusters_
};
MarkerClusterer.prototype.getTotalClusters = function () {
    return this.clusters_.length
};
MarkerClusterer.prototype.addMarker = function (e, t) {
    this.pushMarkerTo_(e);
    if (!t) {
        this.redraw_()
    }
};
MarkerClusterer.prototype.addMarkers = function (e, t) {
    var n;
    for (n = 0; n < e.length; n++) {
        this.pushMarkerTo_(e[n])
    }
    if (!t) {
        this.redraw_()
    }
};
MarkerClusterer.prototype.pushMarkerTo_ = function (e) {
    if (e.getDraggable()) {
        var t = this;
        google.maps.event.addListener(e, "dragend", function () {
            if (t.ready_) {
                this.isAdded = false;
                t.repaint()
            }
        })
    }
    e.isAdded = false;
    this.markers_.push(e)
};
MarkerClusterer.prototype.removeMarker = function (e, t) {
    var n = this.removeMarker_(e);
    if (!t && n) {
        this.repaint()
    }
    return n
};
MarkerClusterer.prototype.removeMarkers = function (e, t) {
    var n, r;
    var i = false;
    for (n = 0; n < e.length; n++) {
        r = this.removeMarker_(e[n]);
        i = i || r
    }
    if (!t && i) {
        this.repaint()
    }
    return i
};
MarkerClusterer.prototype.removeMarker_ = function (e) {
    var t;
    var n = -1;
    if (this.markers_.indexOf) {
        n = this.markers_.indexOf(e)
    } else {
        for (t = 0; t < this.markers_.length; t++) {
            if (e === this.markers_[t]) {
                n = t;
                break
            }
        }
    }
    if (n === -1) {
        return false
    }
    e.setMap(null);
    this.markers_.splice(n, 1);
    return true
};
MarkerClusterer.prototype.clearMarkers = function () {
    this.resetViewport_(true);
    this.markers_ = []
};
MarkerClusterer.prototype.repaint = function () {
    var e = this.clusters_.slice();
    this.clusters_ = [];
    this.resetViewport_(false);
    this.redraw_();
    setTimeout(function () {
        var t;
        for (t = 0; t < e.length; t++) {
            e[t].remove()
        }
    }, 0)
};
MarkerClusterer.prototype.getExtendedBounds = function (e) {
    var t = this.getProjection();
    var n = new google.maps.LatLng(e.getNorthEast().lat(), e.getNorthEast().lng());
    var r = new google.maps.LatLng(e.getSouthWest().lat(), e.getSouthWest().lng());
    var i = t.fromLatLngToDivPixel(n);
    i.x += this.gridSize_;
    i.y -= this.gridSize_;
    var s = t.fromLatLngToDivPixel(r);
    s.x -= this.gridSize_;
    s.y += this.gridSize_;
    var o = t.fromDivPixelToLatLng(i);
    var u = t.fromDivPixelToLatLng(s);
    e.extend(o);
    e.extend(u);
    return e
};
MarkerClusterer.prototype.redraw_ = function () {
    this.createClusters_(0)
};
MarkerClusterer.prototype.resetViewport_ = function (e) {
    var t, n;
    for (t = 0; t < this.clusters_.length; t++) {
        this.clusters_[t].remove()
    }
    this.clusters_ = [];
    for (t = 0; t < this.markers_.length; t++) {
        n = this.markers_[t];
        n.isAdded = false;
        if (e) {
            n.setMap(null)
        }
    }
};
MarkerClusterer.prototype.distanceBetweenPoints_ = function (e, t) {
    var n = 6371;
    var r = (t.lat() - e.lat()) * Math.PI / 180;
    var i = (t.lng() - e.lng()) * Math.PI / 180;
    var s = Math.sin(r / 2) * Math.sin(r / 2) + Math.cos(e.lat() * Math.PI / 180) * Math.cos(t.lat() * Math.PI / 180) * Math.sin(i / 2) * Math.sin(i / 2);
    var o = 2 * Math.atan2(Math.sqrt(s), Math.sqrt(1 - s));
    var u = n * o;
    return u
};
MarkerClusterer.prototype.isMarkerInBounds_ = function (e, t) {
    return t.contains(e.getPosition())
};
MarkerClusterer.prototype.addToClosestCluster_ = function (e) {
    var t, n, r, i;
    var s = 4e4;
    var o = null;
    for (t = 0; t < this.clusters_.length; t++) {
        r = this.clusters_[t];
        i = r.getCenter();
        if (i) {
            n = this.distanceBetweenPoints_(i, e.getPosition());
            if (n < s) {
                s = n;
                o = r
            }
        }
    }
    if (o && o.isMarkerInClusterBounds(e)) {
        o.addMarker(e)
    } else {
        r = new Cluster(this);
        r.addMarker(e);
        this.clusters_.push(r)
    }
};
MarkerClusterer.prototype.createClusters_ = function (e) {
    var t, n;
    var r = this;
    if (!this.ready_) {
        return
    }
    if (e === 0) {
        google.maps.event.trigger(this, "clusteringbegin", this);
        if (typeof this.timerRefStatic !== "undefined") {
            clearTimeout(this.timerRefStatic);
            delete this.timerRefStatic
        }
    }
    var i = new google.maps.LatLngBounds(this.getMap().getBounds().getSouthWest(), this.getMap().getBounds().getNorthEast());
    var s = this.getExtendedBounds(i);
    var o = Math.min(e + this.batchSize_, this.markers_.length);
    for (t = e; t < o; t++) {
        n = this.markers_[t];
        if (!n.isAdded && this.isMarkerInBounds_(n, s)) {
            if (!this.ignoreHidden_ || this.ignoreHidden_ && n.getVisible()) {
                this.addToClosestCluster_(n)
            }
        }
    }
    if (o < this.markers_.length) {
        this.timerRefStatic = setTimeout(function () {
            r.createClusters_(o)
        }, 0)
    } else {
        delete this.timerRefStatic;
        google.maps.event.trigger(this, "clusteringend", this)
    }
};
MarkerClusterer.prototype.extend = function (e, t) {
    return function (e) {
        var t;
        for (t in e.prototype) {
            this.prototype[t] = e.prototype[t]
        }
        return this
    }.apply(e, [t])
};
MarkerClusterer.CALCULATOR = function (e, t) {
    var n = 0;
    var r = e.length.toString();
    var i = r;
    while (i !== 0) {
        i = parseInt(i / 10, 10);
        n++
    }
    n = Math.min(n, t);
    return {text: r, index: n}
};
MarkerClusterer.BATCH_SIZE = 2e3;
MarkerClusterer.BATCH_SIZE_IE = 500;
MarkerClusterer.IMAGE_PATH = "http://google-maps-utility-library-v3.googlecode.com/svn/trunk/markerclustererplus/images/m";
MarkerClusterer.IMAGE_EXTENSION = "png";
MarkerClusterer.IMAGE_SIZES = [53, 56, 66, 78, 90]
